"use strict"

// Note: the reports *must* be well formed. The reporter assumes the reports are
// correct, and will *not* verify this.

var inspect = require("util").inspect
var Promise = require("bluebird")
var resolveAny = require("../../lib/util.js").resolveAny
var t = require("../../index.js")
var tap = require("../../r/tap.js")
var Util = require("../../test-util/base.js")
var p = Util.p
var n = Util.n

describe("reporter tap", function () { // eslint-disable-line max-statements
    function printLines(prefix, lines) {
        return [prefix].concat(lines.map(function (line) {
            return "    " + line
        }))
    }

    function stack(err) {
        var stack = err.stack.split(/\r?\n/g)

        if (err.name === "AssertionError") {
            stack.shift()
        }

        return printLines("  stack: |-", stack)
    }

    function printError(err) {
        var lines = inspect(err).split(/\r?\n/g)

        return printLines("  value: |-", lines)
    }

    function test(name, opts) {
        it(name, function () {
            var list = []
            var reporter = tap({print: function (arg) { list.push(arg) }})

            return Promise.each(opts.input, function (i) {
                return resolveAny(reporter, undefined, i)
            })
            .then(function () {
                t.match(list, opts.output)
            })
        })
    }

    test("empty test", {
        input: [
            n("start", []),
            n("end", []),
            n("exit", []),
        ],
        output: [
            "TAP version 13",
            "# tests 0",
            "# passing 0",
            "# failing 0",
            "# pending 0",
            "1..0",
        ],
    })

    test("passing 2", {
        input: [
            n("start", []),
            n("start", [p("test", 0)]),
            n("end", [p("test", 0)]),
            n("pass", [p("test", 0)]),
            n("start", [p("test", 1)]),
            n("end", [p("test", 1)]),
            n("pass", [p("test", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [
            "TAP version 13",
            "ok 1 test",
            "ok 2 test",
            "# tests 2",
            "# passing 2",
            "# failing 0",
            "# pending 0",
            "1..2",
        ],
    })

    var sentinel = new Error("sentinel")

    test("fail 2 with Error", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("fail", [p("one", 0)], sentinel),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("fail", [p("two", 1)], sentinel),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 one",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "not ok 2 two",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "# tests 2",
            "# passing 0",
            "# failing 2",
            "# pending 0",
            "1..2",
        ]),
    })

    test("pass + fail with Error", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("pass", [p("one", 0)]),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("fail", [p("two", 1)], sentinel),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "ok 1 one",
            "not ok 2 two",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "# tests 2",
            "# passing 1",
            "# failing 1",
            "# pending 0",
            "1..2",
        ]),
    })

    test("fail with Error + pass", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("fail", [p("one", 0)], sentinel),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("pass", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 one",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "ok 2 two",
            "# tests 2",
            "# passing 1",
            "# failing 1",
            "# pending 0",
            "1..2",
        ]),
    })

    var assertion = new t.AssertionError("Expected 1 to equal 2", 1, 2)

    test("fail 2 with AssertionError", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("fail", [p("one", 0)], assertion),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("fail", [p("two", 1)], assertion),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 one",
            "  ---",
            "  expected: 1",
            "  actual: 2",
        ], stack(assertion), [
            "  ...",
            "not ok 2 two",
            "  ---",
            "  expected: 1",
            "  actual: 2",
        ], stack(assertion), [
            "  ...",
            "# tests 2",
            "# passing 0",
            "# failing 2",
            "# pending 0",
            "1..2",
        ]),
    })

    test("pass + fail with AssertionError", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("pass", [p("one", 0)]),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("fail", [p("two", 1)], assertion),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "ok 1 one",
            "not ok 2 two",
            "  ---",
            "  expected: 1",
            "  actual: 2",
        ], stack(assertion), [
            "  ...",
            "# tests 2",
            "# passing 1",
            "# failing 1",
            "# pending 0",
            "1..2",
        ]),
    })

    test("fail with AssertionError + pass", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("fail", [p("one", 0)], assertion),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("pass", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 one",
            "  ---",
            "  expected: 1",
            "  actual: 2",
        ], stack(assertion), [
            "  ...",
            "ok 2 two",
            "# tests 2",
            "# passing 1",
            "# failing 1",
            "# pending 0",
            "1..2",
        ]),
    })

    test("pending 2", {
        input: [
            n("start", []),
            n("pending", [p("one", 0)]),
            n("pending", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [
            "TAP version 13",
            "ok 1 # skip one",
            "ok 2 # skip two",
            "# tests 0",
            "# passing 0",
            "# failing 0",
            "# pending 2",
            "1..2",
        ],
    })

    test("pass + pending", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("pass", [p("one", 0)]),
            n("pending", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [
            "TAP version 13",
            "ok 1 one",
            "ok 2 # skip two",
            "# tests 1",
            "# passing 1",
            "# failing 0",
            "# pending 1",
            "1..2",
        ],
    })

    test("pending + pass", {
        input: [
            n("start", []),
            n("pending", [p("one", 0)]),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("pass", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [
            "TAP version 13",
            "ok 1 # skip one",
            "ok 2 two",
            "# tests 1",
            "# passing 1",
            "# failing 0",
            "# pending 1",
            "1..2",
        ],
    })

    test("fail + pending", {
        input: [
            n("start", []),
            n("start", [p("one", 0)]),
            n("end", [p("one", 0)]),
            n("fail", [p("one", 0)], sentinel),
            n("pending", [p("two", 1)]),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 one",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "ok 2 # skip two",
            "# tests 1",
            "# passing 0",
            "# failing 1",
            "# pending 1",
            "1..2",
        ]),
    })

    test("pending + fail", {
        input: [
            n("start", []),
            n("pending", [p("one", 0)]),
            n("start", [p("two", 1)]),
            n("end", [p("two", 1)]),
            n("fail", [p("two", 1)], sentinel),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "ok 1 # skip one",
            "not ok 2 two",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "# tests 1",
            "# passing 0",
            "# failing 1",
            "# pending 1",
            "1..2",
        ]),
    })

    test("extra pass", {
        input: [
            n("start", []),
            n("start", [p("test", 0)]),
            n("start", [p("test", 0), p("inner", 0)]),
            n("start", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("end", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("pass", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("end", [p("test", 0), p("inner", 0)]),
            n("pass", [p("test", 0), p("inner", 0)]),
            n("end", [p("test", 0)]),
            n("extra", [p("test", 0), p("inner", 0), p("fail", 0)],
                {count: 2, value: undefined}),
            n("extra", [p("test", 0), p("inner", 0), p("fail", 0)],
                {count: 3, value: sentinel}),
            n("pass", [p("test", 0)]),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "ok 1 test inner fail",
            "ok 2 test inner",
            "not ok 3 test inner fail # extra",
            "  ---",
            "  count: 2",
            "  value: undefined",
            "  ...",
            "not ok 4 test inner fail # extra",
            "  ---",
            "  count: 3",
        ], printError(sentinel), [
            "  ...",
            "ok 5 test",
            "# tests 3",
            "# passing 3",
            "# failing 1",
            "# pending 0",
            "1..5",
        ]),
    })

    var wrongType = new TypeError("undefined is not a function")

    test("extra fail", {
        input: [
            n("start", []),
            n("start", [p("test", 0)]),
            n("start", [p("test", 0), p("inner", 0)]),
            n("start", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("end", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("fail", [p("test", 0), p("inner", 0), p("fail", 0)], wrongType),
            n("end", [p("test", 0), p("inner", 0)]),
            n("pass", [p("test", 0), p("inner", 0)]),
            n("end", [p("test", 0)]),
            n("extra", [p("test", 0), p("inner", 0), p("fail", 0)],
                {count: 2, value: undefined}),
            n("extra", [p("test", 0), p("inner", 0), p("fail", 0)],
                {count: 3, value: sentinel}),
            n("pass", [p("test", 0)]),
            n("end", []),
            n("exit", []),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 test inner fail",
            "  ---",
        ], stack(wrongType), [
            "  ...",
            "ok 2 test inner",
            "not ok 3 test inner fail # extra",
            "  ---",
            "  count: 2",
            "  value: undefined",
            "  ...",
            "not ok 4 test inner fail # extra",
            "  ---",
            "  count: 3",
        ], printError(sentinel), [
            "  ...",
            "ok 5 test",
            "# tests 3",
            "# passing 2",
            "# failing 1",
            "# pending 0",
            "1..5",
        ]),
    })

    test("internal errors", {
        input: [
            n("start", []),
            n("start", [p("test", 0), p("inner", 0)]),
            n("start", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("end", [p("test", 0), p("inner", 0), p("fail", 0)]),
            n("fail", [p("test", 0), p("inner", 0), p("fail", 0)], wrongType),
            n("end", [p("test", 0), p("inner", 0)]),
            n("pass", [p("test", 0), p("inner", 0)]),
            n("error", [p("test", 0)], wrongType),
        ],
        output: [].concat([
            "TAP version 13",
            "not ok 1 test inner fail",
            "  ---",
        ], stack(wrongType), [
            "  ...",
            "ok 2 test inner",
            "Bail out!",
            "  ---",
        ], stack(wrongType), [
            "  ...",
        ]),
    })

    test("long passing sequence", {
        /* eslint-disable max-len */

        input: [
            n("start", []),
            n("start", [p("core (basic)", 0)]),
            n("start", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("end", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("pass", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("start", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("end", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("pass", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("start", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("end", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("pass", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("start", [p("core (basic)", 0), p("can accept a string + function", 3)]),
            n("end", [p("core (basic)", 0), p("can accept a string + function", 3)]),
            n("pass", [p("core (basic)", 0), p("can accept a string + function", 3)]),
            n("start", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("end", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("pass", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("start", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("end", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("pass", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("start", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)]),
            n("end", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)]),
            n("pass", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)]),
            n("start", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("end", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("pass", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("start", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("end", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("pass", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("start", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("end", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("pass", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("end", [p("core (basic)", 0)]),
            n("pass", [p("core (basic)", 0)]),
            n("start", [p("cli normalize glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative", 3)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative", 3)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("end", [p("cli normalize glob", 1)]),
            n("pass", [p("cli normalize glob", 1)]),
            n("start", [p("core (timeouts)", 2)]),
            n("start", [p("core (timeouts)", 2), p("succeeds with own", 0)]),
            n("end", [p("core (timeouts)", 2), p("succeeds with own", 0)]),
            n("pass", [p("core (timeouts)", 2), p("succeeds with own", 0)]),
            n("start", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("end", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("pass", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("start", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("end", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("pass", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("start", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("end", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("pass", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("start", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("end", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("pass", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("start", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)]),
            n("end", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)]),
            n("pass", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)]),
            n("start", [p("core (timeouts)", 2), p("gets own sync inner timeout", 6)]),
            n("end", [p("core (timeouts)", 2), p("gets own sync inner timeout", 6)]),
            n("pass", [p("core (timeouts)", 2), p("gets own sync inner timeout", 6)]),
            n("start", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("end", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("pass", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("end", [p("core (timeouts)", 2)]),
            n("pass", [p("core (timeouts)", 2)]),
            n("end", []),
            n("exit", []),
        ],

        output: [
            "TAP version 13",
            "ok 1 core (basic) has `base()`",
            "ok 2 core (basic) has `test()`",
            "ok 3 core (basic) has `parent()`",
            "ok 4 core (basic) can accept a string + function",
            "ok 5 core (basic) can accept a string",
            "ok 6 core (basic) returns the current instance when given a callback",
            "ok 7 core (basic) returns a prototypal clone when not given a callback",
            "ok 8 core (basic) runs block tests within tests",
            "ok 9 core (basic) runs successful inline tests within tests",
            "ok 10 core (basic) accepts a callback with `t.run()`",
            "ok 11 core (basic)",
            "ok 12 cli normalize glob current directory normalizes a file",
            "ok 13 cli normalize glob current directory normalizes a glob",
            "ok 14 cli normalize glob current directory retains trailing slashes",
            "ok 15 cli normalize glob current directory retains negative",
            "ok 16 cli normalize glob current directory retains negative + trailing slashes",
            "ok 17 cli normalize glob current directory",
            "ok 18 cli normalize glob absolute directory normalizes a file",
            "ok 19 cli normalize glob absolute directory normalizes a glob",
            "ok 20 cli normalize glob absolute directory retains trailing slashes",
            "ok 21 cli normalize glob absolute directory retains negative",
            "ok 22 cli normalize glob absolute directory retains negative + trailing slashes",
            "ok 23 cli normalize glob absolute directory",
            "ok 24 cli normalize glob relative directory normalizes a file",
            "ok 25 cli normalize glob relative directory normalizes a glob",
            "ok 26 cli normalize glob relative directory retains trailing slashes",
            "ok 27 cli normalize glob relative directory retains negative",
            "ok 28 cli normalize glob relative directory retains negative + trailing slashes",
            "ok 29 cli normalize glob relative directory",
            "ok 30 cli normalize glob edge cases normalizes `.` with a cwd of `.`",
            "ok 31 cli normalize glob edge cases normalizes `..` with a cwd of `.`",
            "ok 32 cli normalize glob edge cases normalizes `.` with a cwd of `..`",
            "ok 33 cli normalize glob edge cases normalizes directories with a cwd of `..`",
            "ok 34 cli normalize glob edge cases removes excess `.`",
            "ok 35 cli normalize glob edge cases removes excess `..`",
            "ok 36 cli normalize glob edge cases removes excess combined junk",
            "ok 37 cli normalize glob edge cases",
            "ok 38 cli normalize glob",
            "ok 39 core (timeouts) succeeds with own",
            "ok 40 core (timeouts) fails with own",
            "ok 41 core (timeouts) succeeds with inherited",
            "ok 42 core (timeouts) fails with inherited",
            "ok 43 core (timeouts) gets own set timeout",
            "ok 44 core (timeouts) gets own inline set timeout",
            "ok 45 core (timeouts) gets own sync inner timeout",
            "ok 46 core (timeouts) gets default timeout",
            "ok 47 core (timeouts)",
            "# tests 47",
            "# passing 47",
            "# failing 0",
            "# pending 0",
            "1..47",
        ],

        /* eslint-enable max-len */
    })

    test("long mixed bag", {
        /* eslint-disable max-len */

        input: [
            n("start", []),
            n("start", [p("core (basic)", 0)]),
            n("start", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("end", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("pass", [p("core (basic)", 0), p("has `base()`", 0)]),
            n("start", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("end", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("pass", [p("core (basic)", 0), p("has `test()`", 1)]),
            n("start", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("end", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("pass", [p("core (basic)", 0), p("has `parent()`", 2)]),
            n("pending", [p("core (basic)", 0), p("can accept a string + function", 3)]),
            n("start", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("end", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("pass", [p("core (basic)", 0), p("can accept a string", 4)]),
            n("start", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("end", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("pass", [p("core (basic)", 0), p("returns the current instance when given a callback", 5)]),
            n("start", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)]),
            n("end", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)]),
            n("fail", [p("core (basic)", 0), p("returns a prototypal clone when not given a callback", 6)], wrongType),
            n("start", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("end", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("pass", [p("core (basic)", 0), p("runs block tests within tests", 7)]),
            n("start", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("end", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("pass", [p("core (basic)", 0), p("runs successful inline tests within tests", 8)]),
            n("start", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("end", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("pass", [p("core (basic)", 0), p("accepts a callback with `t.run()`", 9)]),
            n("end", [p("core (basic)", 0)]),
            n("pass", [p("core (basic)", 0)]),
            n("start", [p("cli normalize glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)]),
            n("fail", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a file", 0)], sentinel),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains trailing slashes", 2)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("pass", [p("cli normalize glob", 1), p("current directory", 0)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a file", 0)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains trailing slashes", 2)]),
            n("pending", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("pass", [p("cli normalize glob", 1), p("absolute directory", 1)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a file", 0)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("normalizes a glob", 1)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("retains trailing slashes", 2)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative", 3)]),
            n("start", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)]),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)]),
            n("fail", [p("cli normalize glob", 1), p("relative directory", 2), p("retains negative + trailing slashes", 4)], wrongType),
            n("end", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("pass", [p("cli normalize glob", 1), p("relative directory", 2)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `.`", 0)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `..` with a cwd of `.`", 1)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes `.` with a cwd of `..`", 2)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("normalizes directories with a cwd of `..`", 3)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `.`", 4)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess `..`", 5)]),
            n("start", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3), p("removes excess combined junk", 6)]),
            n("end", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("pass", [p("cli normalize glob", 1), p("edge cases", 3)]),
            n("end", [p("cli normalize glob", 1)]),
            n("pass", [p("cli normalize glob", 1)]),
            n("start", [p("core (timeouts)", 2)]),
            n("pending", [p("core (timeouts)", 2), p("succeeds with own", 0)]),
            n("start", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("end", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("pass", [p("core (timeouts)", 2), p("fails with own", 1)]),
            n("start", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("end", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("pass", [p("core (timeouts)", 2), p("succeeds with inherited", 2)]),
            n("start", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("end", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("pass", [p("core (timeouts)", 2), p("fails with inherited", 3)]),
            n("start", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("end", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("pass", [p("core (timeouts)", 2), p("gets own set timeout", 4)]),
            n("start", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)]),
            n("extra", [p("core (timeouts)", 2), p("fails with own", 1)], {count: 2, value: wrongType}),
            n("end", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)]),
            n("fail", [p("core (timeouts)", 2), p("gets own inline set timeout", 5)], sentinel),
            n("pending", [p("core (timeouts)", 2), p("gets own sync inner timeout", 6)]),
            n("start", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("end", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("pass", [p("core (timeouts)", 2), p("gets default timeout", 7)]),
            n("end", [p("core (timeouts)", 2)]),
            n("pass", [p("core (timeouts)", 2)]),
            n("end", []),
            n("exit", []),
        ],

        output: [].concat([
            "TAP version 13",
            "ok 1 core (basic) has `base()`",
            "ok 2 core (basic) has `test()`",
            "ok 3 core (basic) has `parent()`",
            "ok 4 # skip core (basic) can accept a string + function",
            "ok 5 core (basic) can accept a string",
            "ok 6 core (basic) returns the current instance when given a callback",
            "not ok 7 core (basic) returns a prototypal clone when not given a callback",
            "  ---",
        ], stack(wrongType), [
            "  ...",
            "ok 8 core (basic) runs block tests within tests",
            "ok 9 core (basic) runs successful inline tests within tests",
            "ok 10 core (basic) accepts a callback with `t.run()`",
            "ok 11 core (basic)",
            "not ok 12 cli normalize glob current directory normalizes a file",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "ok 13 cli normalize glob current directory normalizes a glob",
            "ok 14 cli normalize glob current directory retains trailing slashes",
            "ok 15 cli normalize glob current directory retains negative",
            "ok 16 cli normalize glob current directory retains negative + trailing slashes",
            "ok 17 cli normalize glob current directory",
            "ok 18 cli normalize glob absolute directory normalizes a file",
            "ok 19 cli normalize glob absolute directory normalizes a glob",
            "ok 20 cli normalize glob absolute directory retains trailing slashes",
            "ok 21 # skip cli normalize glob absolute directory retains negative",
            "ok 22 cli normalize glob absolute directory retains negative + trailing slashes",
            "ok 23 cli normalize glob absolute directory",
            "ok 24 cli normalize glob relative directory normalizes a file",
            "ok 25 cli normalize glob relative directory normalizes a glob",
            "ok 26 cli normalize glob relative directory retains trailing slashes",
            "ok 27 cli normalize glob relative directory retains negative",
            "not ok 28 cli normalize glob relative directory retains negative + trailing slashes",
            "  ---",
        ], stack(wrongType), [
            "  ...",
            "ok 29 cli normalize glob relative directory",
            "ok 30 cli normalize glob edge cases normalizes `.` with a cwd of `.`",
            "ok 31 cli normalize glob edge cases normalizes `..` with a cwd of `.`",
            "ok 32 cli normalize glob edge cases normalizes `.` with a cwd of `..`",
            "ok 33 cli normalize glob edge cases normalizes directories with a cwd of `..`",
            "ok 34 cli normalize glob edge cases removes excess `.`",
            "ok 35 cli normalize glob edge cases removes excess `..`",
            "ok 36 cli normalize glob edge cases removes excess combined junk",
            "ok 37 cli normalize glob edge cases",
            "ok 38 cli normalize glob",
            "ok 39 # skip core (timeouts) succeeds with own",
            "ok 40 core (timeouts) fails with own",
            "ok 41 core (timeouts) succeeds with inherited",
            "ok 42 core (timeouts) fails with inherited",
            "ok 43 core (timeouts) gets own set timeout",
            "not ok 44 core (timeouts) fails with own # extra",
            "  ---",
            "  count: 2",
        ], printError(wrongType), [
            "  ...",
            "not ok 45 core (timeouts) gets own inline set timeout",
            "  ---",
        ], stack(sentinel), [
            "  ...",
            "ok 46 # skip core (timeouts) gets own sync inner timeout",
            "ok 47 core (timeouts) gets default timeout",
            "ok 48 core (timeouts)",
            "# tests 43",
            "# passing 39",
            "# failing 5",
            "# pending 4",
            "1..48",
        ]),

        /* eslint-enable max-len */
    })

    context("restarting", function () {
        test("empty test", {
            input: [
                n("start", []),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("end", []),
                n("exit", []),
            ],
            output: [
                "TAP version 13",
                "# tests 0",
                "# passing 0",
                "# failing 0",
                "# pending 0",
                "1..0",
                "TAP version 13",
                "# tests 0",
                "# passing 0",
                "# failing 0",
                "# pending 0",
                "1..0",
            ],
        })

        test("passing 2", {
            input: [
                n("start", []),
                n("start", [p("test", 0)]),
                n("end", [p("test", 0)]),
                n("pass", [p("test", 0)]),
                n("start", [p("test", 1)]),
                n("end", [p("test", 1)]),
                n("pass", [p("test", 1)]),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("test", 0)]),
                n("end", [p("test", 0)]),
                n("pass", [p("test", 0)]),
                n("start", [p("test", 1)]),
                n("end", [p("test", 1)]),
                n("pass", [p("test", 1)]),
                n("end", []),
                n("exit", []),
            ],
            output: [
                "TAP version 13",
                "ok 1 test",
                "ok 2 test",
                "# tests 2",
                "# passing 2",
                "# failing 0",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "ok 1 test",
                "ok 2 test",
                "# tests 2",
                "# passing 2",
                "# failing 0",
                "# pending 0",
                "1..2",
            ],
        })

        var sentinel = new Error("sentinel")

        test("fail 2 with Error", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], sentinel),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], sentinel),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], sentinel),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], sentinel),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "not ok 1 one",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "not ok 2 two",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "# tests 2",
                "# passing 0",
                "# failing 2",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "not ok 1 one",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "not ok 2 two",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "# tests 2",
                "# passing 0",
                "# failing 2",
                "# pending 0",
                "1..2",
            ]),
        })

        test("pass + fail with Error", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("pass", [p("one", 0)]),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], sentinel),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("pass", [p("one", 0)]),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], sentinel),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "ok 1 one",
                "not ok 2 two",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "ok 1 one",
                "not ok 2 two",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
            ]),
        })

        test("fail with Error + pass", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], sentinel),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("pass", [p("two", 1)]),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], sentinel),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("pass", [p("two", 1)]),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "not ok 1 one",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "ok 2 two",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "not ok 1 one",
                "  ---",
            ], stack(sentinel), [
                "  ...",
                "ok 2 two",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
            ]),
        })

        var assertion = new t.AssertionError("Expected 1 to equal 2", 1, 2)

        test("fail 2 with AssertionError", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], assertion),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], assertion),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], assertion),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], assertion),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "not ok 1 one",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "not ok 2 two",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "# tests 2",
                "# passing 0",
                "# failing 2",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "not ok 1 one",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "not ok 2 two",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "# tests 2",
                "# passing 0",
                "# failing 2",
                "# pending 0",
                "1..2",
            ]),
        })

        test("pass + fail with AssertionError", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("pass", [p("one", 0)]),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], assertion),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("pass", [p("one", 0)]),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("fail", [p("two", 1)], assertion),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "ok 1 one",
                "not ok 2 two",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "ok 1 one",
                "not ok 2 two",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
            ]),
        })

        test("fail with AssertionError + pass", {
            input: [
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], assertion),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("pass", [p("two", 1)]),
                n("end", []),
                n("exit", []),
                n("start", []),
                n("start", [p("one", 0)]),
                n("end", [p("one", 0)]),
                n("fail", [p("one", 0)], assertion),
                n("start", [p("two", 1)]),
                n("end", [p("two", 1)]),
                n("pass", [p("two", 1)]),
                n("end", []),
                n("exit", []),
            ],
            output: [].concat([
                "TAP version 13",
                "not ok 1 one",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "ok 2 two",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
                "TAP version 13",
                "not ok 1 one",
                "  ---",
                "  expected: 1",
                "  actual: 2",
            ], stack(assertion), [
                "  ...",
                "ok 2 two",
                "# tests 2",
                "# passing 1",
                "# failing 1",
                "# pending 0",
                "1..2",
            ]),
        })
    })
})
